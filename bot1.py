import logging
import sqlite3
from datetime import datetime, timedelta
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from pathlib import Path
import re
import time
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSE_TYPE, INPUT_FLIGHT_TIME, INPUT_SPEED, INPUT_PAYLOAD,
    INPUT_AERO_QUALITY, INPUT_THRUST_RESERVE, INPUT_MANEUVER_TIME,
    INPUT_PLANE_MATERIAL, INPUT_PROPELLER_TYPE, INPUT_TAKEOFF_TYPE,
    CALCULATE, CHANGE_FLIGHT_TIME, CHANGE_SPEED,
    CHANGE_AERO_QUALITY, CHANGE_MANEUVER_TIME, WELCOME_STATE,
    SHOW_HISTORY, SHOW_CONFIG, CONFIRM_DELETE, INPUT_CONFIG_NAME
) = range(20)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7307737118:AAH963acFly_MjqnXkE2a8OhrfZjlYm1o50"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤—ã–±–æ—Ä–∞
SELECTION_MAPS = {
    'aero_quality': {"6": 6, "8": 8, "12": 12, "14": 14},
    'thrust_reserve': {"1.5": 1.5, "2.0": 2.0, "3.0": 3.0},
    'plane_material': {"0.40": 0.40, "0.45": 0.45, "0.50": 0.50},
    'propeller_eff': {"0.75": 0.75, "0.80": 0.80},
    'takeoff_type': {"0.3": 0.3, "0.4": 0.4, "0.6": 0.6}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    conn = sqlite3.connect('configurations.db')
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(configurations)")
    columns = [info[1] for info in cursor.fetchall()]
    expected_columns = [
        'id', 'user_id', 'config_name', 'unique_key', 'flight_time', 'distance', 'speed', 'payload',
        'aero_quality', 'thrust_reserve', 'maneuver_time', 'plane_mass', 'propeller_eff',
        'takeoff_type', 'battery_capacity', 'takeoff_mass', 'thrust_cruise', 'thrust_max',
        'power_cruise', 'power_max', 'battery_mass', 'battery_voltage', 'battery_capacity_ah',
        'battery_capacity_recommended', 'battery_type', 'battery_info', 'rotor_info', 'created_at'
    ]
    if not all(col in columns for col in expected_columns):
        cursor.execute("DROP TABLE IF EXISTS configurations")
        cursor.execute('''
            CREATE TABLE configurations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                config_name TEXT,
                unique_key TEXT UNIQUE,
                flight_time REAL,
                distance REAL,
                speed REAL,
                payload REAL,
                aero_quality INTEGER,
                thrust_reserve REAL,
                maneuver_time REAL,
                plane_mass REAL,
                propeller_eff REAL,
                takeoff_type REAL,
                battery_capacity REAL,
                takeoff_mass REAL,
                thrust_cruise REAL,
                thrust_max REAL,
                power_cruise REAL,
                power_max REAL,
                battery_mass REAL,
                battery_voltage REAL,
                battery_capacity_ah REAL,
                battery_capacity_recommended REAL,
                battery_type TEXT,
                battery_info TEXT,
                rotor_info TEXT,
                created_at TEXT,
                UNIQUE(user_id, config_name)
            )
        ''')
    conn.commit()
    conn.close()

# –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def cleanup_old_configs(user_id, max_age_days=30, max_configs=50):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç–∞—Ä—à–µ max_age_days –∏–ª–∏ —Å–≤–µ—Ä—Ö max_configs"""
    conn = sqlite3.connect('configurations.db')
    cursor = conn.cursor()
    cursor.execute('''
        DELETE FROM configurations 
        WHERE user_id = ? AND created_at < datetime('now', ?)
    ''', (user_id, f'-{max_age_days} days'))
    cursor.execute('''
        DELETE FROM configurations 
        WHERE user_id = ? AND id NOT IN (
            SELECT id FROM configurations WHERE user_id = ? 
            ORDER BY created_at DESC LIMIT ?
        )
    ''', (user_id, user_id, max_configs))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

async def delete_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_ids: list = None):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ keep_ids"""
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    keep_ids = keep_ids or []
    
    deleted_count = 0
    failed_count = 0
    
    message_ids_to_delete = list(set(context.user_data['message_ids']))
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {message_ids_to_delete}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ ID: {keep_ids}")
    
    for msg_id in message_ids_to_delete:
        if msg_id not in keep_ids:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                deleted_count += 1
                if msg_id in context.user_data['message_ids']:
                    context.user_data['message_ids'].remove(msg_id)
                logger.debug(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
            except Exception as e:
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {str(e)}")
                if "message to delete not found" in str(e).lower() or "message is too old" in str(e).lower():
                    if msg_id in context.user_data['message_ids']:
                        context.user_data['message_ids'].remove(msg_id)
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ message_ids, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ")
    
    logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {failed_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                      reply_markup=None, parse_mode=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π message_id"""
    chat_id = update.effective_chat.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.message_id} –≤ message_ids")
    
    try:
        sent_msg = None
        if update.callback_query:
            await update.callback_query.answer()
            message_id = update.callback_query.message.message_id
            try:
                sent_msg = await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                sent_msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id} –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            sent_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
        
        if sent_msg.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(sent_msg.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {sent_msg.message_id} –≤ message_ids")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {context.user_data['message_ids']}")
        return sent_msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise
    
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'last_start_time' in context.user_data:
        last_time = context.user_data['last_start_time']
        if (datetime.now() - last_time).total_seconds() < 2:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return WELCOME_STATE
    
    context.user_data['last_start_time'] = datetime.now()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
    context.user_data['message_ids'] = []
    
    welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
    """
    
    welcome_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
        ]),
        parse_mode="Markdown"
    )
    
    context.user_data['welcome_message_id'] = welcome_msg.message_id
    context.user_data['message_ids'] = [welcome_msg.message_id]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_msg.message_id}")
    return WELCOME_STATE

async def handle_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫—Ä–∞–Ω–µ"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞")

    if query.data not in ["history", "new_config", "back_to_welcome"]:
        await send_message(
            update, context,
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
            ])
        )
        return WELCOME_STATE

    elif query.data == "new_config":
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        sent_msg = await context.bot.send_message(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–í–°:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        context.user_data['message_ids'].append(sent_msg.message_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
        return CHOOSE_TYPE
        
    elif query.data == "history":
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, config_name, created_at FROM configurations WHERE user_id = ?', (user_id,))
        configs = cursor.fetchall()
        conn.close()
        if not configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({created_at})", callback_data=f"config_{id}")]
            for id, name, created_at in configs
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY
    
    elif query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        return WELCOME_STATE

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        return WELCOME_STATE
    elif query.data == "back_to_current":
        return await handle_changes(update, context)

    if match := re.match(r"config_(\d+)", query.data):
        config_id = int(match.group(1))
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM configurations WHERE id = ? AND user_id = ?', (config_id, user_id))
        config = cursor.fetchone()
        conn.close()

        if not config:
            await send_message(
                update, context,
                "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")]
                ])
            )
            return SHOW_HISTORY

        result_text = f"""üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config[2]} ({config[27]})

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {config[15]:.2f} –∫–≥
üîπ –¢—è–≥–∞: {config[16]:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {config[17]:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {config[18]/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {config[19]/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {config[24]}:
- –ú–∞—Å—Å–∞: {config[20]:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {config[21]} –í
- –ï–º–∫–æ—Å—Ç—å: {config[22]:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {config[23]:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {config[5]:.2f} –∫–º
- –í—Ä–µ–º—è: {config[4]:.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {config[6]} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {config[10]}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë:
{config[25]}

- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä:
{config[26]}"""
        
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="history")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_id}")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_id}")
        return SHOW_CONFIG

async def show_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if query.data == "history":
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, config_name, created_at FROM configurations WHERE user_id = ?', (user_id,))
        configs = cursor.fetchall()
        conn.close()

        if not configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({created_at})", callback_data=f"config_{id}")]
            for id, name, created_at in configs
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    if match := re.match(r"delete_(\d+)", query.data):
        config_id = int(match.group(1))
        await send_message(
            update, context,
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{config_id}")],
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"config_{config_id}")]
            ])
        )
        return CONFIRM_DELETE

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if match := re.match(r"confirm_delete_(\d+)", query.data):
        config_id = int(match.group(1))
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM configurations WHERE id = ? AND user_id = ?', (config_id, user_id))
        conn.commit()
        conn.close()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_id}")
        
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, config_name, created_at FROM configurations WHERE user_id = ?', (user_id,))
        configs = cursor.fetchall()
        conn.close()

        if not configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({created_at})", callback_data=f"config_{id}")]
            for id, name, created_at in configs
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    if match := re.match(r"config_(\d+)", query.data):
        config_id = int(match.group(1))
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM configurations WHERE id = ? AND user_id = ?', (config_id, user_id))
        config = cursor.fetchone()
        conn.close()

        if not config:
            await send_message(
                update, context,
                "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")]
                ])
            )
            return SHOW_HISTORY

        result_text = f"""üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config[2]} ({config[27]})

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {config[15]:.2f} –∫–≥
üîπ –¢—è–≥–∞: {config[16]:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {config[17]:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {config[18]/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {config[19]/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {config[24]}:
- –ú–∞—Å—Å–∞: {config[20]:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {config[21]} –í
- –ï–º–∫–æ—Å—Ç—å: {config[22]:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {config[23]:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {config[5]:.2f} –∫–º
- –í—Ä–µ–º—è: {config[4]:.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {config[6]} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {config[10]}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë:
{config[25]}

- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä:
{config[26]}"""
        
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_id}")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_id}")
        return SHOW_CONFIG

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ë–í–°"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ë–í–°")

    if query.data not in ["loitering", "long_range"]:
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        sent_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSE_TYPE
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ
    await delete_messages(context, chat_id, keep_ids=[])  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π keep_ids
    
    context.user_data['type'] = query.data
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –ë–í–°: {query.data}")
    
    prompt = ("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5). –≠—Ç–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ë–ü–õ–ê –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ:" 
              if query.data == "loitering" 
              else "–í–≤–µ–¥–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ –∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300). –≠—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ë–ü–õ–ê –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å:")
    
    sent_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=prompt,
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data['message_ids'].append(sent_msg.message_id)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{prompt[:50]}...' —Å ID {sent_msg.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    return INPUT_FLIGHT_TIME

async def input_flight_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞")
    
    try:
        value = float(update.message.text.replace(',', '.'))
        if value <= 0:
            raise ValueError
        
        context.user_data['flight_time' if context.user_data['type'] == "loitering" else 'distance'] = value
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–π—Å–µ—Ä—Å–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120):",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {context.user_data['message_ids']}")
        return INPUT_SPEED
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_FLIGHT_TIME

async def input_speed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    
    try:
        speed = float(update.message.text.replace(',', '.'))
        if speed <= 0:
            raise ValueError
            
        context.user_data['speed'] = speed
        
        if context.user_data['type'] == "loitering":
            context.user_data['distance'] = context.user_data['flight_time'] * speed
        else:
            context.user_data['flight_time'] = context.user_data['distance'] / speed
            
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {context.user_data['message_ids']}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}")
        return INPUT_PAYLOAD
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_SPEED

async def input_payload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
    
    try:
        payload = float(update.message.text.replace(',', '.'))
        if payload <= 0:
            raise ValueError
            
        context.user_data['payload'] = payload
        
        aero_info = """‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:

6 - –°–∞–º–æ–ª–µ—Ç —Å–ª–∞–±–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã:
- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂
- –û—Ç–∫—Ä—ã—Ç—ã–µ —É—á–∞—Å—Ç–∫–∏, –Ω–µ—Ç –∫–∞–ø–æ—Ç–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
- –ü—Ä—è–º–æ–µ –∫—Ä—ã–ª–æ –±–µ–∑ –∑–∞–∫–æ–Ω—Ü–æ–≤–æ–∫
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏
- –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

8 - –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂, –Ω–æ –æ–±—à–∏—Ç—ã–π
- –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç –∫–∞–ø–æ—Ç–æ–º
- –ü—Ä—è–º–æ–µ –∫—Ä—ã–ª–æ –±–µ–∑ –∑–∞–∫–æ–Ω—Ü–æ–≤–æ–∫
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏

12 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂
- –¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–æ–µ –∫—Ä—ã–ª–æ —Å –∑–∞–∫–æ–Ω—Ü–æ–≤–∫–∞–º–∏
- –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç –∫–∞–ø–æ—Ç–æ–º
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏

14 - –í—ã—Å–æ–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞
- –£–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏
- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã –æ–±—Ç–µ–∫–∞—Ç–µ–ª—è–º–∏
- –°–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""

        keyboard = [
            [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
            [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
            [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
            [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
        ]
        
        prompt_msg = await send_message(update, context, aero_info, reply_markup=InlineKeyboardMarkup(keyboard))
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã: {context.user_data['message_ids']}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –º–∞—Å—Å—É –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: {payload}")
        return INPUT_AERO_QUALITY
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_PAYLOAD

async def input_aero_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    if query.data not in SELECTION_MAPS['aero_quality']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
                [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
                [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
                [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_AERO_QUALITY
    
    context.user_data['aero_quality'] = int(query.data)
    
    thrust_info = """üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ:

1.5 - –ú–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º –¥–æ 45¬∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤–∑–ª–µ—Ç–Ω–æ–π –º–∞—Å—Å—ã
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á

2.0 - –ú–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º –¥–æ 65¬∞
- –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã
- –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞–Ω–µ–≤—Ä–æ–≤

3.0 - –ü–∏–ª–æ—Ç–∞–∂–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã (–∫—Ä–µ–Ω –¥–æ 80¬∞)
- –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã
- –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    keyboard = [
        [InlineKeyboardButton("1.5 (–¥–æ 45¬∞)", callback_data="1.5")],
        [InlineKeyboardButton("2.0 (–¥–æ 65¬∞)", callback_data="2.0")],
        [InlineKeyboardButton("3.0 (–ø–∏–ª–æ—Ç–∞–∂)", callback_data="3.0")]
    ]
    
    prompt_msg = await send_message(update, context, thrust_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {query.data}")
    return INPUT_THRUST_RESERVE

async def input_thrust_reserve(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ")
    
    if query.data not in SELECTION_MAPS['thrust_reserve']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1.5 (–¥–æ 45¬∞)", callback_data="1.5")],
                [InlineKeyboardButton("2.0 (–¥–æ 65¬∞)", callback_data="2.0")],
                [InlineKeyboardButton("3.0 (–ø–∏–ª–æ—Ç–∞–∂)", callback_data="3.0")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_THRUST_RESERVE
    
    context.user_data['thrust_reserve'] = float(query.data)
    
    maneuver_info = """üîÑ –í—ã–±–µ—Ä–∏—Ç–µ % –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:

10-15% - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª–µ—Ç –±–µ–∑ –∫—Ä–µ–Ω–∞
- –ú–∞–Ω–µ–≤—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–ª–µ—Ç–∞/–ø–æ—Å–∞–¥–∫–∏ –∏ –Ω–∞ –ø–æ–¥–ª–µ—Ç–µ –∫ —Ü–µ–ª–∏
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –º–∞—Å—Å—É

30% - –ë–∞—Ä—Ä–∞–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥ —Ç–æ—á–∫–æ–π
- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º
- –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã"""
        
    keyboard = [
        [InlineKeyboardButton("10%", callback_data="10")],
        [InlineKeyboardButton("15%", callback_data="15")],
        [InlineKeyboardButton("30%", callback_data="30")]
    ]
    
    prompt_msg = await send_message(update, context, maneuver_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∑–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ: {query.data}")
    return INPUT_MANEUVER_TIME

async def input_maneuver_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if query.data not in ["10", "15", "30"]:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("10%", callback_data="10")],
                [InlineKeyboardButton("15%", callback_data="15")],
                [InlineKeyboardButton("30%", callback_data="30")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_MANEUVER_TIME
    
    context.user_data['maneuver_time'] = float(query.data)
    
    flight_time = context.user_data.get('flight_time', 0)
    battery_type = "Li-ion (300 –í—Ç¬∑—á/–∫–≥)" if flight_time > 1 else "LiPo (200 –í—Ç¬∑—á/–∫–≥)"
    context.user_data['battery_capacity'] = 300 if flight_time > 1 else 200
    
    keyboard = [
        [InlineKeyboardButton("–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (0.40)", callback_data="0.40")],
        [InlineKeyboardButton("–¶–µ–ª—å–Ω–æ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ (0.45)", callback_data="0.45")],
        [InlineKeyboardButton("–î–µ—Ä–µ–≤–æ/—Ñ–∞–Ω–µ—Ä–∞ (0.50)", callback_data="0.50")]
    ]
    
    prompt_msg = await send_message(
        update, context,
        f"üîã –í—ã–±—Ä–∞–Ω –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞–Ω–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {query.data}%")
    return INPUT_PLANE_MATERIAL

async def input_plane_material(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞")
    
    if query.data not in SELECTION_MAPS['plane_material']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (0.40)", callback_data="0.40")],
                [InlineKeyboardButton("–¶–µ–ª—å–Ω–æ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ (0.45)", callback_data="0.45")],
                [InlineKeyboardButton("–î–µ—Ä–µ–≤–æ/—Ñ–∞–Ω–µ—Ä–∞ (0.50)", callback_data="0.50")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_PLANE_MATERIAL
    
    context.user_data['plane_mass'] = float(query.data)
    
    propeller_info = """üåÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–Ω—Ç–∞:

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã - –ö–ü–î 75%
- –û–±—ã—á–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –≤–∏–Ω—Ç—ã
- –î–µ—à–µ–≤–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–µ–µ

–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ - –ö–ü–î 80%
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
- –î–æ—Ä–æ–∂–µ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ"""
        
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã (75%)", callback_data="0.75")],
        [InlineKeyboardButton("–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ (80%)", callback_data="0.80")]
    ]
    
    prompt_msg = await send_message(update, context, propeller_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞–Ω–µ—Ä–∞: {query.data}")
    return INPUT_PROPELLER_TYPE

async def input_propeller_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞")
    
    if query.data not in SELECTION_MAPS['propeller_eff']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã (75%)", callback_data="0.75")],
                [InlineKeyboardButton("–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ (80%)", callback_data="0.80")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_PROPELLER_TYPE
    
    context.user_data['propeller_eff'] = float(query.data)
    
    takeoff_info = """üõ´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∑–ª–µ—Ç–∞:
    
–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.3
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç—è–≥–µ

–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.4
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∑–ª–µ—Ç

–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.6
- –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç—è–≥–∞"""
        
    keyboard = [
        [InlineKeyboardButton("–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã (0.3)", callback_data="0.3")],
        [InlineKeyboardButton("–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü (0.4)", callback_data="0.4")],
        [InlineKeyboardButton("–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü (0.6)", callback_data="0.6")]
    ]
    
    prompt_msg = await send_message(update, context, takeoff_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –≤–∏–Ω—Ç–∞: {query.data}")
    return INPUT_TAKEOFF_TYPE

async def input_takeoff_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞")
    
    if query.data not in SELECTION_MAPS['takeoff_type']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã (0.3)", callback_data="0.3")],
                [InlineKeyboardButton("–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü (0.4)", callback_data="0.4")],
                [InlineKeyboardButton("–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü (0.6)", callback_data="0.6")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_TAKEOFF_TYPE
    
    context.user_data['takeoff_type'] = float(query.data)
    
    summary = f"""üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
- –¢–∏–ø –ë–í–°: {'–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π' if context.user_data['type'] == 'loitering' else '–î–∞–ª—å–Ω–∏–π'}
- –í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞: {context.user_data['flight_time']:.2f} —á
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {context.user_data['distance']:.2f} –∫–º
- –°–∫–æ—Ä–æ—Å—Ç—å: {context.user_data['speed']} –∫–º/—á
- –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {context.user_data['payload']} –∫–≥
- –ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {context.user_data['aero_quality']}
- –ó–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ: {context.user_data['thrust_reserve']}
- –ú–∞–Ω–µ–≤—Ä—ã: {context.user_data['maneuver_time']}% –≤—Ä–µ–º–µ–Ω–∏
- –ú–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞–Ω–µ—Ä–∞: {context.user_data['plane_mass']}
- –ö–ü–î –≤–∏–Ω—Ç–∞: {context.user_data['propeller_eff']}
- –¢–∏–ø –≤–∑–ª–µ—Ç–∞: {context.user_data['takeoff_type']}
"""
    prompt_msg = await send_message(
        update, context,
        summary,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_calc")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="restart")]
        ])
    )
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
    return CALCULATE

async def input_config_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    config_name = update.message.text.strip()
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    if not config_name:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏")
        return INPUT_CONFIG_NAME

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    unique_key = f"{user_id}:{config_name}:{timestamp}"

    data = context.user_data
    conn = sqlite3.connect('configurations.db')
    cursor = conn.cursor()
    try:
        cursor.execute('''
            INSERT INTO configurations (
                user_id, config_name, unique_key, flight_time, distance, speed, payload,
                aero_quality, thrust_reserve, maneuver_time, plane_mass, propeller_eff,
                takeoff_type, battery_capacity, takeoff_mass, thrust_cruise, thrust_max,
                power_cruise, power_max, battery_mass, battery_voltage, battery_capacity_ah,
                battery_capacity_recommended, battery_type, battery_info, rotor_info, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, config_name, unique_key, data['flight_time'], data['distance'], data['speed'],
            data['payload'], data['aero_quality'], data['thrust_reserve'], data['maneuver_time'],
            data['plane_mass'], data['propeller_eff'], data['takeoff_type'], data['battery_capacity'],
            data['takeoff_mass'], data['thrust_cruise'], data['thrust_max'], data['power_cruise'],
            data['power_max'], data['battery_mass'], data['battery_voltage'], data['battery_capacity_ah'],
            data['battery_capacity_recommended'], data['battery_type'], data['battery_info'],
            data['rotor_info'], timestamp
        ))
        conn.commit()
        await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])
        prompt_msg = await send_message(
            update, context,
            f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
                [InlineKeyboardButton("üõ† –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {config_name}")
    except sqlite3.IntegrityError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∏–º–µ–Ω–∏")
        return INPUT_CONFIG_NAME
    finally:
        conn.close()
    
    cleanup_old_configs(user_id)
    return CALCULATE

async def calculate_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    start_time = time.time()
    chat_id = update.effective_chat.id
    data = context.user_data
    user_id = update.effective_user.id
    file_path = Path('–±–∞–∑–∞.xlsx')
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ calculate_results")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not file_path.exists():
            await send_message(
                update, context,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª '–±–∞–∑–∞.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error(f"Excel file {file_path} not found")
            return ConversationHandler.END
        
        xls = pd.ExcelFile(file_path)
        required_sheets = ['–ê–ö–ë', '–≠–ª–µ–∫—Ç—Ä–æ—Ä–æ—Ç–æ—Ä—ã']
        if not all(s in xls.sheet_names for s in required_sheets):
            await send_message(
                update, context,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª '–±–∞–∑–∞.xlsx' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –ª–∏—Å—Ç—ã.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error("Invalid Excel file structure: missing sheets")
            return ConversationHandler.END
        
        df_akb = pd.read_excel(xls, sheet_name='–ê–ö–ë')
        df_electrorotors = pd.read_excel(xls, sheet_name='–≠–ª–µ–∫—Ç—Ä–æ—Ä–æ—Ç–æ—Ä—ã')
        
        required_columns_akb = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)', '–ï–º–∫–æ—Å—Ç—å (mah)', '–í–µ—Å (–∫–≥)']
        required_columns_rotors = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞', '–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)']
        if not all(col in df_akb.columns for col in required_columns_akb) or \
           not all(col in df_electrorotors.columns for col in required_columns_rotors):
            await send_message(
                update, context,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ '–±–∞–∑–∞.xlsx'.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error("Invalid Excel file structure: missing columns")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_keys = ['payload', 'distance', 'maneuver_time', 'battery_capacity', 'aero_quality', 'propeller_eff', 'thrust_reserve', 'plane_mass', 'speed', 'takeoff_type']
        if not all(key in data for key in required_keys):
            missing_keys = [key for key in required_keys if key not in data]
            await send_message(
                update, context,
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(missing_keys)}",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error(f"Missing parameters in context.user_data: {missing_keys}")
            return ConversationHandler.END

        G_pn = data['payload']
        L = data['distance']
        x = data['maneuver_time']
        E_a = data['battery_capacity']
        K = data['aero_quality']
        n = data['propeller_eff']
        E = data['thrust_reserve']
        G_plan = data['plane_mass']
        V = data['speed']
        T_W = data['takeoff_type']
        
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: G_pn={G_pn}, L={L}, x={x}, E_a={E_a}, K={K}, n={n}, E={E}, G_plan={G_plan}, V={V}, T_W={T_W}")
        
        cruise_part = (100 * L * (100 - x)) / (100 * 27 * E_a * K * n)
        maneuver_part = (100 * L * E * x) / (2700 * E_a * K * n)
        denominator = 1 - cruise_part - maneuver_part - G_plan
        logger.info(f"cruise_part={cruise_part}, maneuver_part={maneuver_part}, denominator={denominator}")
        
        if denominator <= 0:
            error_message = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:</b> –ù–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å—É–º–º–∞ –¥–æ–ª–µ–π –º–∞—Å—Å—ã: {denominator:.2f}).\n\n"
            error_message += "–°—É–º–º–∞ –¥–æ–ª–µ–π –º–∞—Å—Å—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤–µ–ª–∏—á–∏–Ω—É.\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            recommendations = []
            if data['type'] == "loitering":
                error_message += f"- –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å: {L:.2f} –∫–º\n"
                if L > 300:
                    recommendations.append(f"–£–º–µ–Ω—å—à–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ (—Å–µ–π—á–∞—Å {data['flight_time']:.2f} —á)")
            else:
                if L > 300:
                    recommendations.append(f"–£–º–µ–Ω—å—à–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å (—Å–µ–π—á–∞—Å {L:.2f} –∫–º)")
            if x > 15:
                recommendations.append(f"–°–Ω–∏–∑—å—Ç–µ % –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–µ–π—á–∞—Å {x}%)")
            if K < 12:
                recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
            if E > 1.5:
                recommendations.append("–£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ")
            
            error_message += "\n".join([f"‚Ä¢ {r}" for r in recommendations]) if recommendations else "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            error_message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            
            keyboard = [
                [InlineKeyboardButton("–í—Ä–µ–º—è/–¥–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="change_flight_time")],
                [InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å", callback_data="change_speed")],
                [InlineKeyboardButton("–ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞", callback_data="change_aero_quality")],
                [InlineKeyboardButton("–ú–∞–Ω–µ–≤—Ä—ã", callback_data="change_maneuver_time")],
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ]
            sent_msg = await send_message(update, context, error_message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
            context.user_data['result_message_id'] = sent_msg.message_id
            context.user_data['current_config'] = data
            logger.info(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {denominator}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ ID {sent_msg.message_id}")
            return CALCULATE
        
        G_vzl = G_pn / denominator
        P = G_vzl / K
        N = (E * P * V * 100) / (27 * n)
        N_max = (E * G_vzl * T_W * V * 100) / (27 * n)
        
        if G_vzl <= 0 or P <= 0 or N <= 0 or N_max <= 0:
            await send_message(
                update, context,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –†–∞—Å—á–µ—Ç –¥–∞–ª –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.",
                reply_markup=ReplyKeyboardRemove()
            )
            logger.error(f"Invalid calculation results: G_vzl={G_vzl}, P={P}, N={N}, N_max={N_max}")
            return ConversationHandler.END
        
        battery_share = cruise_part + maneuver_part
        m_akb = battery_share * G_vzl
        U_akb = 22.2 if G_vzl < 15 else 44.4 if 15 <= G_vzl <= 50 else 51.8
        C_akb = (m_akb * E_a) / U_akb
        C_akb_recommended = C_akb * 1.15
        battery_type = 'Li-ion' if E_a == 300 else 'LiPo'

        suitable_akb = df_akb[
            (abs(df_akb['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)'] - U_akb) <= 2) &
            (df_akb['–ï–º–∫–æ—Å—Ç—å (mah)']/1000 >= C_akb*1.1) &
            (df_akb['–í–µ—Å (–∫–≥)'] <= m_akb)
        ].iloc[0:1]
        
        suitable_rotors = df_electrorotors[
            (df_electrorotors['–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)'] >= N/1000) &
            (df_electrorotors['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)'] < U_akb)
        ].iloc[0:1]
        
        akb = (f"{suitable_akb.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} - {suitable_akb.iloc[0]['–°—Å—ã–ª–∫–∞']}" 
               if not suitable_akb.empty 
               else "‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–π –ê–ö–ë –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—Å—É –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.")
        rotor = (f"{suitable_rotors.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} - {suitable_rotors.iloc[0]['–°—Å—ã–ª–∫–∞']}" 
                 if not suitable_rotors.empty 
                 else "‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—â–Ω–æ—Å—Ç–∏.")

        data['takeoff_mass'] = G_vzl
        data['thrust_cruise'] = P
        data['thrust_max'] = E * P
        data['power_cruise'] = N
        data['power_max'] = N_max
        data['battery_mass'] = m_akb
        data['battery_voltage'] = U_akb
        data['battery_capacity_ah'] = C_akb
        data['battery_capacity_recommended'] = C_akb_recommended
        data['battery_type'] = battery_type
        data['battery_info'] = akb
        data['rotor_info'] = rotor
        context.user_data['current_config'] = data

        result_text = f"""üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {G_vzl:.2f} –∫–≥
üîπ –¢—è–≥–∞: {P:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {E*P:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {N/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {N_max/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {battery_type}:
- –ú–∞—Å—Å–∞: {m_akb:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {U_akb} –í
- –ï–º–∫–æ—Å—Ç—å: {C_akb:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {C_akb_recommended:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {L:.2f} –∫–º
- –í—Ä–µ–º—è: {data['flight_time']:.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {V} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {x}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:
- –ê–ö–ë:
{akb}

- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä:
{rotor}"""
        
        logger.info(f"Message IDs before deletion in calculate_results: {context.user_data.get('message_ids', [])}")
        await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])
        logger.info(f"Message IDs after deletion: {context.user_data.get('message_ids', [])}")
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        
        sent_msg = await send_message(update, context, result_text, reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data['result_message_id'] = sent_msg.message_id
        logger.info(f"–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ ID {sent_msg.message_id}")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {context.user_data['message_ids']}")
        return CALCULATE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}")
        await send_message(
            update, context,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
        
async def handle_changes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    if query.data == "history":
        conn = sqlite3.connect('configurations.db')
        cursor = conn.cursor()
        cursor.execute('SELECT id, config_name, created_at FROM configurations WHERE user_id = ?', (user_id,))
        configs = cursor.fetchall()
        conn.close()
        
        keyboard = [
            [InlineKeyboardButton(f"{name} ({created_at})", callback_data=f"config_{id}")]
            for id, name, created_at in configs
        ]
        keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—á–µ—Ç—É", callback_data="back_to_current")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        
        await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])
        await send_message(
            update, context,
            "üìú –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SHOW_HISTORY
    
    elif query.data == "back_to_current":
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ user_data
        data = context.user_data.get('current_config', {})
        if not data:
            return await handle_welcome(update, context)
            
        result_text = f"""üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data['distance']:.2f} –∫–º
- –í—Ä–µ–º—è: {data['flight_time']:.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data['speed']} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data['maneuver_time']}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏:
- –ê–ö–ë:
{data['battery_info']}

- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä:
{data['rotor_info']}"""
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        
        await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CALCULATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({created_at})", callback_data=f"config_{id}")]
            for id, name, created_at in configs
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        
        await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])
        await send_message(
            update, context,
            "üìú –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SHOW_HISTORY
    
    if query.data == "restart":
        context.user_data['message_ids'] = [context.user_data.get('welcome_message_id')] if context.user_data.get('welcome_message_id') else []
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        prompt_msg = await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–í–°:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ë–í–°")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return CHOOSE_TYPE
    elif query.data == "change_flight_time":
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö:" if context.user_data['type'] == "loitering" 
            else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞–ª—å–Ω–æ—Å—Ç–∏")
        return CHANGE_FLIGHT_TIME
    elif query.data == "change_speed":
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –∫–º/—á:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
        return CHANGE_SPEED
    elif query.data == "change_aero_quality":
        keyboard = [
            [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
            [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
            [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
            [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
        ]
        prompt_msg = await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        return CHANGE_AERO_QUALITY
    elif query.data == "change_maneuver_time":
        keyboard = [
            [InlineKeyboardButton("10%", callback_data="10")],
            [InlineKeyboardButton("15%", callback_data="15")],
            [InlineKeyboardButton("30%", callback_data="30")]
        ]
        prompt_msg = await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
        return CHANGE_MANEUVER_TIME
    elif query.data == "save_config":
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return INPUT_CONFIG_NAME
    elif query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        prompt_msg = await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return WELCOME_STATE
    elif query.data == "confirm_calc":
        prompt_msg = await send_message(update, context, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞")
        return await calculate_results(update, context)
    elif query.data == "change_params":
        keyboard = [
            [InlineKeyboardButton("–í—Ä–µ–º—è/–¥–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="change_flight_time")],
            [InlineKeyboardButton("–°–∫–æ—Ä–æ—Å—Ç—å", callback_data="change_speed")],
            [InlineKeyboardButton("–ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞", callback_data="change_aero_quality")],
            [InlineKeyboardButton("–ú–∞–Ω–µ–≤—Ä—ã", callback_data="change_maneuver_time")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
        ]
        prompt_msg = await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        return CALCULATE

async def change_flight_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    try:
        value = float(update.message.text.replace(',', '.'))
        if value <= 0:
            raise ValueError
            
        if context.user_data['type'] == "loitering":
            context.user_data['flight_time'] = value
            context.user_data['distance'] = value * context.user_data['speed']
        else:
            context.user_data['distance'] = value
            context.user_data['flight_time'] = value / context.user_data['speed']
            
        prompt_msg = await send_message(update, context, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Å—á–µ—Ç–µ")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è/–¥–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ {value}")
        return await calculate_results(update, context)
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        return CHANGE_FLIGHT_TIME

async def change_speed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if update.message and update.message.message_id:
        context.user_data['message_ids'].append(update.message.message_id)
    
    try:
        speed = float(update.message.text)
        if speed <= 0:
            raise ValueError
            
        context.user_data['speed'] = speed
        
        if context.user_data['type'] == "loitering":
            context.user_data['distance'] = context.user_data['flight_time'] * speed
        else:
            context.user_data['flight_time'] = context.user_data['distance'] / speed
            
        await send_message(update, context, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
        logger.info(f"User {user_id} changed speed to {speed}")
        return await calculate_results(update, context)
        
    except ValueError:
        await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        return CHANGE_SPEED

async def change_aero_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.message.message_id:
        context.user_data['message_ids'].append(query.message.message_id)
    
    if query.data not in SELECTION_MAPS['aero_quality']:
        await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
                [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
                [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
                [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
            ])
        )
        return CHANGE_AERO_QUALITY
    
    context.user_data['aero_quality'] = int(query.data)
    
    await send_message(update, context, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
    logger.info(f"User {user_id} changed aero quality to {query.data}")
    return await calculate_results(update, context)

async def change_maneuver_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.message.message_id:
        context.user_data['message_ids'].append(query.message.message_id)
    
    if query.data not in ["10", "15", "30"]:
        await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("10%", callback_data="10")],
                [InlineKeyboardButton("15%", callback_data="15")],
                [InlineKeyboardButton("30%", callback_data="30")]
            ])
        )
        return CHANGE_MANEUVER_TIME
    
    context.user_data['maneuver_time'] = float(query.data)
    
    await send_message(update, context, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ—Å—á–µ—Ç...", reply_markup=ReplyKeyboardRemove())
    logger.info(f"User {user_id} changed maneuver time to {query.data}%")
    return await calculate_results(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    chat_id = update.effective_chat.id
    context.user_data.clear()
    context.user_data['message_ids'] = []
    await delete_messages(context, chat_id)
    
    await send_message(
        update, context,
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"User {update.effective_user.id} cancelled the conversation")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WELCOME_STATE: [CallbackQueryHandler(handle_welcome)],
            CHOOSE_TYPE: [CallbackQueryHandler(choose_type)],
            INPUT_FLIGHT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_flight_time)],
            INPUT_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_speed)],
            INPUT_PAYLOAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_payload)],
            INPUT_AERO_QUALITY: [CallbackQueryHandler(input_aero_quality)],
            INPUT_THRUST_RESERVE: [CallbackQueryHandler(input_thrust_reserve)],
            INPUT_MANEUVER_TIME: [CallbackQueryHandler(input_maneuver_time)],
            INPUT_PLANE_MATERIAL: [CallbackQueryHandler(input_plane_material)],
            INPUT_PROPELLER_TYPE: [CallbackQueryHandler(input_propeller_type)],
            INPUT_TAKEOFF_TYPE: [CallbackQueryHandler(input_takeoff_type)],
            CALCULATE: [CallbackQueryHandler(handle_changes)],
            CHANGE_FLIGHT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_flight_time)],
            CHANGE_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_speed)],
            CHANGE_AERO_QUALITY: [CallbackQueryHandler(change_aero_quality)],
            CHANGE_MANEUVER_TIME: [CallbackQueryHandler(change_maneuver_time)],
            SHOW_HISTORY: [CallbackQueryHandler(show_history)],
            SHOW_CONFIG: [CallbackQueryHandler(show_config)],
            CONFIRM_DELETE: [CallbackQueryHandler(confirm_delete)],
            INPUT_CONFIG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_config_name)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('start', start)
        ],
        per_message=False
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()