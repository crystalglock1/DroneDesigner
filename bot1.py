import logging
import json
import subprocess
from dotenv import load_dotenv
import os
from datetime import datetime, timedelta
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from pathlib import Path
import re
import time
import uuid
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSE_TYPE, INPUT_FLIGHT_TIME, INPUT_SPEED, INPUT_PAYLOAD,
    INPUT_AERO_QUALITY, INPUT_THRUST_RESERVE, INPUT_MANEUVER_TIME,
    INPUT_PLANE_MATERIAL, INPUT_PROPELLER_TYPE, INPUT_TAKEOFF_TYPE,
    INPUT_CEILING, CALCULATE, CHANGE_FLIGHT_TIME, CHANGE_SPEED,
    CHANGE_AERO_QUALITY, CHANGE_MANEUVER_TIME, WELCOME_STATE,
    SHOW_HISTORY, SHOW_CONFIG, CONFIRM_DELETE, INPUT_CONFIG_NAME
) = range(21)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
load_dotenv()
GIT_TOKEN = os.getenv("GIT_TOKEN")
CONFIG_FILE = 'configurations.json'

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è)
STD_ATMOSPHERE = {
    'density': 1.225  # –∫–≥/–º¬≥ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤—ã–±–æ—Ä–∞
SELECTION_MAPS = {
    'aero_quality': {"6": 6, "8": 8, "12": 12, "14": 14},
    'thrust_reserve': {"1.5": 1.5, "2.0": 2.0, "3.0": 3.0},
    'plane_material': {"0.40": 0.40, "0.45": 0.45, "0.50": 0.50},
    'propeller_eff': {"0.75": 0.75, "0.80": 0.80},
    'takeoff_type': {"0.3": 0.3, "0.4": 0.4, "0.6": 0.6}
}

def calculate_air_density(altitude):
    """–†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞ –ø–æ –º–æ–¥–µ–ª–∏ ISA"""
    rho_0 = 1.225  # –∫–≥/–º¬≥ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è
    T_0 = 288.15   # –ö –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è
    g = 9.81       # –º/—Å¬≤
    R = 287.05     # –î–∂/(–∫–≥¬∑–ö)
    L = 0.0065     # –ö/–º (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç)
    exponent = g / (R * L)
    return rho_0 * (1 - L * altitude / T_0) ** exponent if altitude <= 11000 else 0.3639 * math.exp(-g * (altitude - 11000) / (R * 226.32))

def load_configs():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                return json.load(f)
        return {}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è configurations.json, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
        return {}

def save_configs(configs):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ JSON-—Ñ–∞–π–ª"""
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(configs, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ configurations.json: {e}")

def update_repo():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub"""
    try:
        subprocess.run(['git', 'config', '--global', 'user.email', 'bot@example.com'], check=True)
        subprocess.run(['git', 'config', '--global', 'user.name', 'Bot'], check=True)
        subprocess.run(['git', 'add', CONFIG_FILE], check=True)
        subprocess.run(['git', 'commit', '-m', '–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'], check=True)
        subprocess.run(['git', 'push', 'origin', 'main'], check=True)
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—àe –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {e}")

async def delete_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_ids: list = None):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ keep_ids"""
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    keep_ids = keep_ids or []
    
    deleted_count = 0
    failed_count = 0
    
    message_ids_to_delete = list(set(context.user_data['message_ids']))
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {message_ids_to_delete}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ ID: {keep_ids}")
    
    for msg_id in message_ids_to_delete:
        if msg_id not in keep_ids:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
                deleted_count += 1
                if msg_id in context.user_data['message_ids']:
                    context.user_data['message_ids'].remove(msg_id)
                logger.debug(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
            except Exception as e:
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {str(e)}")
                if "message to delete not found" in str(e).lower() or "message is too old" in str(e).lower():
                    if msg_id in context.user_data['message_ids']:
                        context.user_data['message_ids'].remove(msg_id)
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ message_ids, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ")
    
    logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {failed_count} —Å–æ–æ–±—â–µ–Ω–∏–π")

async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                      reply_markup=None, parse_mode=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π message_id"""
    chat_id = update.effective_chat.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.message_id} –≤ message_ids")
    
    try:
        sent_msg = None
        if update.callback_query:
            await update.callback_query.answer()
            message_id = update.callback_query.message.message_id
            try:
                sent_msg = await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                sent_msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id} –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            sent_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
        
        if sent_msg.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(sent_msg.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {sent_msg.message_id} –≤ message_ids")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {context.user_data['message_ids']}")
        return sent_msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'last_start_time' in context.user_data:
        last_time = context.user_data['last_start_time']
        if (datetime.now() - last_time).total_seconds() < 2:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return WELCOME_STATE
    
    context.user_data['last_start_time'] = datetime.now()
    context.user_data['message_ids'] = []
    
    welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –†–∞–∑–º–∞—Ö –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
    """
    
    welcome_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
        ]),
        parse_mode="Markdown"
    )
    
    context.user_data['welcome_message_id'] = welcome_msg.message_id
    context.user_data['message_ids'] = [welcome_msg.message_id]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_msg.message_id}")
    return WELCOME_STATE

async def handle_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫—Ä–∞–Ω–µ"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞")

    if query.data not in ["history", "new_config", "back_to_welcome"]:
        await send_message(
            update, context,
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
            ])
        )
        return WELCOME_STATE

    elif query.data == "history":
        configs = load_configs()
        user_configs = configs.get(str(user_id), {})
        if not user_configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({data['created_at']})", callback_data=f"config_{name}")]
            for name, data in user_configs.items()
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    elif query.data == "new_config":
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        sent_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–í–°:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        context.user_data['message_ids'].append(sent_msg.message_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_msg.message_id}")
        return CHOOSE_TYPE

    elif query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –†–∞–∑–º–∞—Ö –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        return WELCOME_STATE

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –†–∞–∑–º–∞—Ö –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        return WELCOME_STATE

    elif query.data == "back_to_current":
        data = context.user_data.get('current_config', {})
        if not data:
            await send_message(
                update, context,
                "‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="restart")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return CALCULATE

        result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return CALCULATE

    if match := re.match(r"config_(.+)", query.data):
        config_name = match.group(1)
        configs = load_configs()
        config = configs.get(str(user_id), {}).get(config_name)
        if not config:
            await send_message(
                update, context,
                "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")]
                ])
            )
            return SHOW_HISTORY

        result_text = f"""
üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name} ({config['created_at']})

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {config['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {config['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {config['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {config['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {config['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {config['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {config['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {config['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {config['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {config['battery_type']}:
- –ú–∞—Å—Å–∞: {config['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {config['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {config['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {config['battery_capacity_recommended']} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {config.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {config.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {config.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {config.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {config['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {config['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="history")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_name}")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}")
        return SHOW_CONFIG

async def show_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if query.data == "history":
        configs = load_configs()
        user_configs = configs.get(str(user_id), {})
        if not user_configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({data['created_at']})", callback_data=f"config_{name}")]
            for name, data in user_configs.items()
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    if match := re.match(r"delete_(.+)", query.data):
        config_name = match.group(1)
        await send_message(
            update, context,
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{config_name}")],
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data=f"config_{config_name}")]
            ])
        )
        return CONFIRM_DELETE

    if match := re.match(r"config_(.+)", query.data):
        config_name = match.group(1)
        configs = load_configs()
        config = configs.get(str(user_id), {}).get(config_name)
        if not config:
            await send_message(
                update, context,
                "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")]
                ])
            )
            return SHOW_HISTORY

        result_text = f"""
üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name} ({config['created_at']})

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {config['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {config['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {config['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {config['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {config['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {config['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {config['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {config['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {config['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {config['battery_type']}:
- –ú–∞—Å—Å–∞: {config['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {config['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {config['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {config['battery_capacity_recommended']} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {config.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {config.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {config.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {config.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {config['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {config['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="history")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_name}")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}")
        return SHOW_CONFIG

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")

    await delete_messages(context, chat_id, keep_ids=[context.user_data.get('welcome_message_id')])

    if match := re.match(r"confirm_delete_(.+)", query.data):
        config_name = match.group(1)
        configs = load_configs()
        if str(user_id) in configs and config_name in configs[str(user_id)]:
            del configs[str(user_id)][config_name]
            if not configs[str(user_id)]:
                del configs[str(user_id)]
            save_configs(configs)
            if os.getenv('RENDER'):
                update_repo()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}")
        
        user_configs = configs.get(str(user_id), {})
        if not user_configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({data['created_at']})", callback_data=f"config_{name}")]
            for name, data in user_configs.items()
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    if match := re.match(r"config_(.+)", query.data):
        config_name = match.group(1)
        configs = load_configs()
        config = configs.get(str(user_id), {}).get(config_name)
        if not config:
            await send_message(
                update, context,
                "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="history")]
                ])
            )
            return SHOW_HISTORY

        result_text = f"""
üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name} ({config['created_at']})

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {config['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {config['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {config['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {config['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {config['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {config['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {config['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {config['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {config['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {config['battery_type']}:
- –ú–∞—Å—Å–∞: {config['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {config['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {config['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {config['battery_capacity_recommended']} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {config.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {config.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {config.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {config.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {config['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {config['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="history")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{config_name}")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}")
        return SHOW_CONFIG

async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ë–í–°"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id

    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []

    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ë–í–°")

    if query.data not in ["loitering", "long_range"]:
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        sent_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return CHOOSE_TYPE
    
    await delete_messages(context, chat_id, keep_ids=[])
    
    context.user_data['type'] = query.data
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –ë–í–°: {query.data}")
    
    prompt = ("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5). –≠—Ç–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ë–ü–õ–ê –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ:" 
              if query.data == "loitering" 
              else "–í–≤–µ–¥–∏—Ç–µ –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ –∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300). –≠—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ë–ü–õ–ê –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å:")
    
    sent_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=prompt,
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data['message_ids'].append(sent_msg.message_id)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{prompt[:50]}...' —Å ID {sent_msg.message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    return INPUT_FLIGHT_TIME

async def input_flight_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞")
    
    try:
        value = float(update.message.text.replace(',', '.'))
        if value <= 0:
            raise ValueError
        
        context.user_data['flight_time' if context.user_data['type'] == "loitering" else 'distance'] = value
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–π—Å–µ—Ä—Å–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120):",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: {context.user_data['message_ids']}")
        return INPUT_SPEED
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_FLIGHT_TIME

async def input_speed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    
    try:
        speed = float(update.message.text.replace(',', '.'))
        if speed <= 0:
            raise ValueError
            
        context.user_data['speed'] = speed
        
        if context.user_data['type'] == "loitering":
            context.user_data['distance'] = context.user_data['flight_time'] * speed
        else:
            context.user_data['flight_time'] = context.user_data['distance'] / speed
            
        prompt_msg = await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: {context.user_data['message_ids']}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}")
        return INPUT_PAYLOAD
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_SPEED

async def input_payload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
    
    try:
        payload = float(update.message.text.replace(',', '.'))
        if payload <= 0:
            raise ValueError
            
        context.user_data['payload'] = payload
        
        aero_info = """‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:

6 - –°–∞–º–æ–ª–µ—Ç —Å–ª–∞–±–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã:
- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂
- –û—Ç–∫—Ä—ã—Ç—ã–µ —É—á–∞—Å—Ç–∫–∏, –Ω–µ—Ç –∫–∞–ø–æ—Ç–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
- –ü—Ä—è–º–æ–µ –∫—Ä—ã–ª–æ –±–µ–∑ –∑–∞–∫–æ–Ω—Ü–æ–≤–æ–∫
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏
- –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

8 - –ë–∞–∑–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂, –Ω–æ –æ–±—à–∏—Ç—ã–π
- –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç –∫–∞–ø–æ—Ç–æ–º
- –ü—Ä—è–º–æ–µ –∫—Ä—ã–ª–æ –±–µ–∑ –∑–∞–∫–æ–Ω—Ü–æ–≤–æ–∫
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏

12 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –≤ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–º —Å–µ—á–µ–Ω–∏–∏ —Ñ—é–∑–µ–ª—è–∂
- –¢—Ä–∞–ø–µ—Ü–∏–µ–≤–∏–¥–Ω–æ–µ –∫—Ä—ã–ª–æ —Å –∑–∞–∫–æ–Ω—Ü–æ–≤–∫–∞–º–∏
- –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã—Ç –∫–∞–ø–æ—Ç–æ–º
- –ù–µ—É–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏

14 - –í—ã—Å–æ–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
- –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞
- –£–±–∏—Ä–∞–µ–º—ã–µ —à–∞—Å—Å–∏
- –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã –æ–±—Ç–µ–∫–∞—Ç–µ–ª—è–º–∏
- –°–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""

        keyboard = [
            [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
            [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
            [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
            [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
        ]
        
        prompt_msg = await send_message(update, context, aero_info, reply_markup=InlineKeyboardMarkup(keyboard))
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã: {context.user_data['message_ids']}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –º–∞—Å—Å—É –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: {payload}")
        return INPUT_AERO_QUALITY
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_PAYLOAD

async def input_aero_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    if query.data not in SELECTION_MAPS['aero_quality']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
                [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
                [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
                [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_AERO_QUALITY
    
    context.user_data['aero_quality'] = int(query.data)
    
    thrust_info = """üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ:

1.5 - –ú–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º –¥–æ 45¬∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤–∑–ª–µ—Ç–Ω–æ–π –º–∞—Å—Å—ã
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á

2.0 - –ú–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º –¥–æ 65¬∞
- –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã
- –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞–Ω–µ–≤—Ä–æ–≤

3.0 - –ü–∏–ª–æ—Ç–∞–∂–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã (–∫—Ä–µ–Ω –¥–æ 80¬∞)
- –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã
- –¢–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    keyboard = [
        [InlineKeyboardButton("1.5 (–¥–æ 45¬∞)", callback_data="1.5")],
        [InlineKeyboardButton("2.0 (–¥–æ 65¬∞)", callback_data="2.0")],
        [InlineKeyboardButton("3.0 (–ø–∏–ª–æ—Ç–∞–∂)", callback_data="3.0")]
    ]
    
    prompt_msg = await send_message(update, context, thrust_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∏: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {query.data}")
    return INPUT_THRUST_RESERVE

async def input_thrust_reserve(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ")
    
    if query.data not in SELECTION_MAPS['thrust_reserve']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("1.5 (–¥–æ 45¬∞)", callback_data="1.5")],
                [InlineKeyboardButton("2.0 (–¥–æ 65¬∞)", callback_data="2.0")],
                [InlineKeyboardButton("3.0 (–ø–∏–ª–æ—Ç–∞–∂)", callback_data="3.0")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_THRUST_RESERVE
    
    context.user_data['thrust_reserve'] = float(query.data)
    
    maneuver_info = """üîÑ –í—ã–±–µ—Ä–∏—Ç–µ % –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:

10-15% - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª–µ—Ç –±–µ–∑ –∫—Ä–µ–Ω–∞
- –ú–∞–Ω–µ–≤—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑–ª–µ—Ç–∞/–ø–æ—Å–∞–¥–∫–∏ –∏ –Ω–∞ –ø–æ–¥–ª–µ—Ç–µ –∫ —Ü–µ–ª–∏
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –º–∞—Å—Å—É

30% - –ë–∞—Ä—Ä–∞–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–¥ —Ç–æ—á–∫–æ–π
- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞–Ω–µ–≤—Ä—ã —Å –∫—Ä–µ–Ω–æ–º
- –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –º–∞—Å—Å—ã"""
        
    keyboard = [
        [InlineKeyboardButton("10%", callback_data="10")],
        [InlineKeyboardButton("15%", callback_data="15")],
        [InlineKeyboardButton("30%", callback_data="30")]
    ]
    
    prompt_msg = await send_message(update, context, maneuver_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∞—Å–∞ –ø–æ —Ç—è–≥–µ: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∑–∞–ø–∞—Å –ø–æ —Ç—è–≥–µ: {query.data}")
    return INPUT_MANEUVER_TIME

async def input_maneuver_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if query.data not in ["10", "15", "30"]:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("10%", callback_data="10")],
                [InlineKeyboardButton("15%", callback_data="15")],
                [InlineKeyboardButton("30%", callback_data="30")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_MANEUVER_TIME
    
    context.user_data['maneuver_time'] = float(query.data)
    
    flight_time = context.user_data.get('flight_time', 0)
    battery_type = "Li-ion (300 –í—Ç¬∑—á/–∫–≥)" if flight_time > 1 else "LiPo (200 –í—Ç¬∑—á/–∫–≥)"
    context.user_data['battery_capacity'] = 300 if flight_time > 1 else 200
    
    keyboard = [
        [InlineKeyboardButton("–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (0.40)", callback_data="0.40")],
        [InlineKeyboardButton("–¶–µ–ª—å–Ω–æ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ (0.45)", callback_data="0.45")],
        [InlineKeyboardButton("–î–µ—Ä–µ–≤–æ/—Ñ–∞–Ω–µ—Ä–∞ (0.50)", callback_data="0.50")]
    ]
    
    prompt_msg = await send_message(
        update, context,
        f"üîã –í—ã–±—Ä–∞–Ω –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery_type}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞–Ω–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {query.data}%")
    return INPUT_PLANE_MATERIAL

async def input_plane_material(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–ª–∞–Ω–µ—Ä–∞")
    
    if query.data not in SELECTION_MAPS['plane_material']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (0.40)", callback_data="0.40")],
                [InlineKeyboardButton("–¶–µ–ª—å–Ω–æ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ (0.45)", callback_data="0.45")],
                [InlineKeyboardButton("–î–µ—Ä–µ–≤–æ/—Ñ–∞–Ω–µ—Ä–∞ (0.50)", callback_data="0.50")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_PLANE_MATERIAL
    
    context.user_data['plane_mass'] = float(query.data)
    
    propeller_info = """üåÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–Ω—Ç–∞:

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã - –ö–ü–î 75%
- –û–±—ã—á–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –≤–∏–Ω—Ç—ã
- –î–µ—à–µ–≤–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–µ–µ

–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ - –ö–ü–î 80%
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
- –î–æ—Ä–æ–∂–µ, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ"""
        
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã (75%)", callback_data="0.75")],
        [InlineKeyboardButton("–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ (80%)", callback_data="0.80")]
    ]
    
    prompt_msg = await send_message(update, context, propeller_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª –ø–ª–∞–Ω–µ—Ä–∞: {query.data}")
    return INPUT_PROPELLER_TYPE

async def input_propeller_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞")
    
    if query.data not in SELECTION_MAPS['propeller_eff']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∏–Ω—Ç—ã (75%)", callback_data="0.75")],
                [InlineKeyboardButton("–í–∏–Ω—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ (80%)", callback_data="0.80")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_PROPELLER_TYPE
    
    context.user_data['propeller_eff'] = float(query.data)
    
    takeoff_info = """üõ´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∑–ª–µ—Ç–∞:
    
–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.3
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç—è–≥–µ

–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.4
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∑–ª–µ—Ç

–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 0.6
- –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç—è–≥–∞"""
        
    keyboard = [
        [InlineKeyboardButton("–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã (0.3)", callback_data="0.3")],
        [InlineKeyboardButton("–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü (0.4)", callback_data="0.4")],
        [InlineKeyboardButton("–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü (0.6)", callback_data="0.6")]
    ]
    
    prompt_msg = await send_message(update, context, takeoff_info, reply_markup=InlineKeyboardMarkup(keyboard))
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∏–Ω—Ç–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –≤–∏–Ω—Ç–∞: {query.data}")
    return INPUT_TAKEOFF_TYPE

async def input_takeoff_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞")
    
    if query.data not in SELECTION_MAPS['takeoff_type']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–° –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã (0.3)", callback_data="0.3")],
                [InlineKeyboardButton("–° –±–µ—Ç–æ–Ω–Ω–æ–π –í–ü–ü (0.4)", callback_data="0.4")],
                [InlineKeyboardButton("–° –≥—Ä—É–Ω—Ç–æ–≤–æ–π –í–ü–ü (0.6)", callback_data="0.6")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return INPUT_TAKEOFF_TYPE
    
    context.user_data['takeoff_type'] = float(query.data)
    
    prompt_msg = await send_message(
        update, context,
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –ø–æ–ª–µ—Ç–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5000):",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã—Å–æ—Ç—ã")
    logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∑–ª–µ—Ç–∞: {context.user_data['message_ids']}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –≤–∑–ª–µ—Ç–∞: {query.data}")
    return INPUT_CEILING

async def input_ceiling(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ –ø–æ–ª–µ—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è –≤–≤–æ–¥–∞ –≤—ã—Å–æ—Ç—ã")
    
    try:
        ceiling = float(update.message.text.replace(',', '.'))
        if ceiling < 0 or ceiling > 15000:
            raise ValueError("–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 15000 –º")
            
        context.user_data['ceiling'] = ceiling
        data = calculate_results(context)
        context.user_data['current_config'] = data
        
        result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        
        prompt_msg = await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã—Å–æ—Ç—ã: {context.user_data['message_ids']}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {ceiling} –º")
        return CALCULATE
        
    except ValueError as e:
        prompt_msg = await send_message(
            update, context,
            f"–û—à–∏–±–∫–∞! {str(e)}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 15000:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        logger.debug(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ message_ids –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {context.user_data['message_ids']}")
        return INPUT_CEILING

def calculate_results(context):
    """–†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê"""
    data = context.user_data
    g = 9.81  # –º/—Å¬≤
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    payload = data['payload']
    plane_mass_coeff = data['plane_mass']
    aero_quality = data['aero_quality']
    thrust_reserve = data['thrust_reserve']
    maneuver_time = data['maneuver_time'] / 100
    speed_kmh = data['speed']
    speed_ms = speed_kmh / 3.6
    propeller_eff = data['propeller_eff']
    takeoff_coeff = data['takeoff_type']
    flight_time_h = data['flight_time']
    ceiling = data.get('ceiling', 0)  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫, –º
    
    # –†–∞—Å—á–µ—Ç –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞
    air_density = calculate_air_density(ceiling)
    
    # –†–∞—Å—á–µ—Ç –≤–∑–ª–µ—Ç–Ω–æ–π –º–∞—Å—Å—ã
    takeoff_mass = payload / (1 - plane_mass_coeff)
    
    # –†–∞—Å—á–µ—Ç –ø–æ–¥—ä–µ–º–Ω–æ–π —Å–∏–ª—ã –∏ –ø–ª–æ—â–∞–¥–∏ –∫—Ä—ã–ª–∞
    lift = takeoff_mass * g
    C_L = 1.0  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–¥—ä–µ–º–Ω–æ–π —Å–∏–ª—ã
    wing_area = lift / (0.5 * air_density * speed_ms**2 * C_L)
    
    # –£–¥–ª–∏–Ω–µ–Ω–∏–µ –∫—Ä—ã–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    aspect_ratio_map = {6: 6, 8: 7, 12: 8, 14: 9}
    aspect_ratio = aspect_ratio_map[aero_quality]
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–∞—Ö–∞ –∫—Ä—ã–ª–∞
    wingspan = (wing_area * aspect_ratio) ** 0.5
    
    # –†–∞—Å—á–µ—Ç —Ç—è–≥–∏
    thrust_cruise = takeoff_mass * g / aero_quality
    thrust_max = thrust_cruise * thrust_reserve
    thrust_takeoff = thrust_max * takeoff_coeff
    
    # –†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏
    power_cruise = thrust_cruise * speed_ms / propeller_eff
    power_max = thrust_max * speed_ms / propeller_eff
    
    # –†–∞—Å—á–µ—Ç –±–∞—Ç–∞—Ä–µ–∏
    battery_capacity = data['battery_capacity']
    battery_voltage = 48 if battery_capacity == 300 else 36
    energy_required = power_cruise * flight_time_h * 3600 * (1 + maneuver_time * (thrust_reserve - 1))
    battery_capacity_ah = energy_required / (battery_voltage * 3600)
    battery_mass = energy_required / (battery_capacity * 3600)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    data.update({
        'takeoff_mass': takeoff_mass,
        'thrust_cruise': thrust_cruise / g,
        'thrust_max': thrust_max / g,
        'power_cruise': power_cruise,
        'power_max': power_max,
        'battery_mass': battery_mass,
        'battery_voltage': battery_voltage,
        'battery_capacity_ah': battery_capacity_ah,
        'battery_capacity_recommended': battery_capacity_ah * 1.2,
        'battery_type': "Li-ion" if flight_time_h > 1 else "LiPo",
        'battery_info': f"{battery_capacity_ah:.2f} –ê¬∑—á ({battery_voltage} –í, {battery_mass:.2f} –∫–≥)",
        'rotor_info': f"{power_max/1000:.2f} –∫–í—Ç, {thrust_max/g:.2f} –∫–≥—Å",
        'wing_area': wing_area,
        'wingspan': wingspan,
        'air_density': air_density,
        'ceiling': ceiling
    })
    return data

async def calculate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—á–µ—Ç–∞")
    
    if query.data == "restart":
        context.user_data.clear()
        context.user_data['message_ids'] = []
        keyboard = [
            [InlineKeyboardButton("–ë–∞—Ä—Ä–∞–∂–∏—Ä—É—é—â–∏–π –ë–í–°", callback_data="loitering")],
            [InlineKeyboardButton("–ë–í–° –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="long_range")]
        ]
        await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–í–°:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOOSE_TYPE
    
    if query.data == "change_params":
        keyboard = [
            [InlineKeyboardButton("–í—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞/–î–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="change_flight_time")],
            [InlineKeyboardButton("–ö—Ä–µ–π—Å–µ—Ä—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data="change_speed")],
            [InlineKeyboardButton("–ê—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="change_aero_quality")],
            [InlineKeyboardButton("–í—Ä–µ–º—è –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="change_maneuver_time")],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_current")]
        ]
        await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CALCULATE
    
    if query.data == "change_flight_time":
        prompt = ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):" 
                  if context.user_data['type'] == "loitering" 
                  else "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ –∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300):")
        await send_message(
            update, context,
            prompt,
            reply_markup=ReplyKeyboardRemove()
        )
        return CHANGE_FLIGHT_TIME
    
    if query.data == "change_speed":
        await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫—Ä–µ–π—Å–µ—Ä—Å–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHANGE_SPEED
    
    if query.data == "change_aero_quality":
        keyboard = [
            [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
            [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
            [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
            [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
        ]
        await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHANGE_AERO_QUALITY
    
    if query.data == "change_maneuver_time":
        keyboard = [
            [InlineKeyboardButton("10%", callback_data="10")],
            [InlineKeyboardButton("15%", callback_data="15")],
            [InlineKeyboardButton("30%", callback_data="30")]
        ]
        await send_message(
            update, context,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π % –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHANGE_MANEUVER_TIME
    
    if query.data == "save_config":
        await send_message(
            update, context,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Drone_1):",
            reply_markup=ReplyKeyboardRemove()
        )
        return INPUT_CONFIG_NAME
    
    if query.data == "history":
        configs = load_configs()
        user_configs = configs.get(str(user_id), {})
        if not user_configs:
            await send_message(
                update, context,
                "‚è≥ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return WELCOME_STATE

        keyboard = [
            [InlineKeyboardButton(f"{name} ({data['created_at']})", callback_data=f"config_{name}")]
            for name, data in user_configs.items()
        ]
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")])
        await send_message(update, context, "üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_HISTORY

    if query.data == "back_to_welcome":
        welcome_text = """
üöÄ *DroneDesigner* ‚Äî Telegram-–±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–ü–õ–ê

‚Ä¢ –ú–∞—Å—Å–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞—Ç–∞—Ä–µ–∏
‚Ä¢ –†–∞–∑–º–∞—Ö –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞

–î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –ë–ü–õ–ê!
        """
        await send_message(
            update, context,
            welcome_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
                [InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="new_config")]
            ]),
            parse_mode="Markdown"
        )
        return WELCOME_STATE

    if query.data == "back_to_current":
        data = context.user_data.get('current_config', {})
        if not data:
            await send_message(
                update, context,
                "‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ† –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="restart")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
                ])
            )
            return CALCULATE

        result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return CALCULATE

async def change_flight_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –∏–ª–∏ –¥–∞–ª—å–Ω–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        value = float(update.message.text.replace(',', '.'))
        if value <= 0:
            raise ValueError
        
        if context.user_data['type'] == "loitering":
            context.user_data['flight_time'] = value
            context.user_data['distance'] = value * context.user_data['speed']
        else:
            context.user_data['distance'] = value
            context.user_data['flight_time'] = value / context.user_data['speed']
        
        data = calculate_results(context)
        context.user_data['current_config'] = data
        
        result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞/–¥–∞–ª—å–Ω–æ—Å—Ç—å: {value}")
        return CALCULATE
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        return CHANGE_FLIGHT_TIME

async def change_speed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        speed = float(update.message.text.replace(',', '.'))
        if speed <= 0:
            raise ValueError
            
        context.user_data['speed'] = speed
        
        if context.user_data['type'] == "loitering":
            context.user_data['distance'] = context.user_data['flight_time'] * speed
        else:
            context.user_data['flight_time'] = context.user_data['distance'] / speed
        
        data = calculate_results(context)
        context.user_data['current_config'] = data
        
        result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
        """
        keyboard = [
            [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
        ]
        await send_message(
            update, context,
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —Å–∫–æ—Ä–æ—Å—Ç—å: {speed} –∫–º/—á")
        return CALCULATE
        
    except ValueError:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞")
        return CHANGE_SPEED

async def change_aero_quality(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    if query.data not in SELECTION_MAPS['aero_quality']:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("6 (–ü–ª–æ—Ö–æ–µ)", callback_data="6")],
                [InlineKeyboardButton("8 (–°—Ä–µ–¥–Ω–µ–µ)", callback_data="8")],
                [InlineKeyboardButton("12 (–•–æ—Ä–æ—à–µ–µ)", callback_data="12")],
                [InlineKeyboardButton("14 (–û—Ç–ª–∏—á–Ω–æ–µ)", callback_data="14")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return CHANGE_AERO_QUALITY
    
    context.user_data['aero_quality'] = int(query.data)
    data = calculate_results(context)
    context.user_data['current_config'] = data
    
    result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
    """
    keyboard = [
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
    ]
    await send_message(
        update, context,
        result_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {query.data}")
    return CALCULATE

async def change_maneuver_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    
    if query.message.message_id and query.message.message_id not in context.user_data['message_ids']:
        context.user_data['message_ids'].append(query.message.message_id)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {query.message.message_id} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if query.data not in ["10", "15", "30"]:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("10%", callback_data="10")],
                [InlineKeyboardButton("15%", callback_data="15")],
                [InlineKeyboardButton("30%", callback_data="30")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞")
        return CHANGE_MANEUVER_TIME
    
    context.user_data['maneuver_time'] = float(query.data)
    data = calculate_results(context)
    context.user_data['current_config'] = data
    
    result_text = f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
    """
    keyboard = [
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="save_config")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="change_params")]
    ]
    await send_message(
        update, context,
        result_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: {query.data}%")
    return CALCULATE

async def save_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    config_name = update.message.text.strip()
    
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    
    if update.message and update.message.message_id:
        if update.message.message_id not in context.user_data['message_ids']:
            context.user_data['message_ids'].append(update.message.message_id)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {update.message.message_id} –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    if not config_name or len(config_name) > 50:
        prompt_msg = await send_message(
            update, context,
            "–û—à–∏–±–∫–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_current")]
            ])
        )
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω message_id {prompt_msg.message_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è")
        return INPUT_CONFIG_NAME
    
    configs = load_configs()
    if str(user_id) not in configs:
        configs[str(user_id)] = {}
    
    data = context.user_data['current_config'].copy()
    data['created_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    configs[str(user_id)][config_name] = data
    save_configs(configs)
    
    if os.getenv('RENDER'):
        update_repo()
    
    result_text = f"""
üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {config_name}

üîπ –í–∑–ª–µ—Ç–Ω–∞—è –º–∞—Å—Å–∞: {data['takeoff_mass']:.2f} –∫–≥
üîπ –¢—è–≥–∞: {data['thrust_cruise']:.2f} –∫–≥—Å (–∫—Ä–µ–π—Å–µ—Ä), {data['thrust_max']:.2f} –∫–≥—Å (–º–∞–∫—Å)
üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {data['power_cruise']/1000:.2f} –∫–í—Ç (–∫—Ä–µ–π—Å–µ—Ä), {data['power_max']/1000:.2f} –∫–í—Ç (–º–∞–∫—Å)
üîπ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫: {data['ceiling']:.0f} –º
üîπ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {data['air_density']:.3f} –∫–≥/–º¬≥
üîπ –†–∞–∑–º–∞—Ö –∫—Ä—ã–ª–∞: {data['wingspan']:.2f} –º
üîπ –ü–ª–æ—â–∞–¥—å –∫—Ä—ã–ª–∞: {data['wing_area']:.2f} –º¬≤

üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä {data['battery_type']}:
- –ú–∞—Å—Å–∞: {data['battery_mass']:.2f} –∫–≥
- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {data['battery_voltage']} –í
- –ï–º–∫–æ—Å—Ç—å: {data['battery_capacity_ah']:.2f} –ê¬∑—á (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {data['battery_capacity_recommended']:.2f} –ê¬∑—á)

‚úàÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞:
- –î–∞–ª—å–Ω–æ—Å—Ç—å: {data.get('distance', 0):.2f} –∫–º
- –í—Ä–µ–º—è: {data.get('flight_time', 0):.2f} —á
- –°–∫–æ—Ä–æ—Å—Ç—å: {data.get('speed', 0)} –∫–º/—á
- –ú–∞–Ω–µ–≤—Ä—ã: {data.get('maneuver_time', 0)}% –≤—Ä–µ–º–µ–Ω–∏

ü¶æ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:
- –ê–ö–ë: {data['battery_info']}
- –≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä: {data['rotor_info']}
    """
    keyboard = [
        [InlineKeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [InlineKeyboardButton("üõ† –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data="restart")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_welcome")]
    ]
    await send_message(
        update, context,
        result_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {config_name}")
    return CALCULATE

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            WELCOME_STATE: [CallbackQueryHandler(handle_welcome)],
            SHOW_HISTORY: [CallbackQueryHandler(show_history)],
            SHOW_CONFIG: [CallbackQueryHandler(show_config)],
            CONFIRM_DELETE: [CallbackQueryHandler(confirm_delete)],
            CHOOSE_TYPE: [CallbackQueryHandler(choose_type)],
            INPUT_FLIGHT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_flight_time)],
            INPUT_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_speed)],
            INPUT_PAYLOAD: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_payload)],
            INPUT_AERO_QUALITY: [CallbackQueryHandler(input_aero_quality)],
            INPUT_THRUST_RESERVE: [CallbackQueryHandler(input_thrust_reserve)],
            INPUT_MANEUVER_TIME: [CallbackQueryHandler(input_maneuver_time)],
            INPUT_PLANE_MATERIAL: [CallbackQueryHandler(input_plane_material)],
            INPUT_PROPELLER_TYPE: [CallbackQueryHandler(input_propeller_type)],
            INPUT_TAKEOFF_TYPE: [CallbackQueryHandler(input_takeoff_type)],
            INPUT_CEILING: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_ceiling)],
            CALCULATE: [CallbackQueryHandler(calculate)],
            CHANGE_FLIGHT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_flight_time)],
            CHANGE_SPEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_speed)],
            CHANGE_AERO_QUALITY: [CallbackQueryHandler(change_aero_quality)],
            CHANGE_MANEUVER_TIME: [CallbackQueryHandler(change_maneuver_time)],
            INPUT_CONFIG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_config)]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()